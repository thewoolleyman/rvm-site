.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/integration/" }
    Integration
  &nbsp;>&nbsp;
  %a{ :href => "/integration/passenger/" }
    Passenger
  %hr

%a{ :name => "passenger" }
%h1
  Using RVM rubies with Passenger
%p
  RVM will allow you to use any of it's MRI/YARV rubies with passenger very easily.

%h1
  Passenger with RVM

%h3
  Select a Passenger Ruby and Generate Wrapper Scripts
%p
  Run RVM using your desired Ruby interpreter, and pass the '--passenger' option.  This will generate wrapper scripts in RVM's bin directory (see Notes below).

%pre.code
  :preserve
    rvm ree --passenger

%h3
  Install Passenger
%pre.code
  :preserve
    rvm ree
    gem install passenger
    rvmsudo passenger-install-nginx-module
%p
  Or if you are forced to use the tomahawk,
%pre.code
  :preserve
    rvmsudo passenger-install-apache2-module

%h3
  Configure the Web Server
%p
  For Nginx users

%pre.code
  :preserve
    passenger_ruby /home/wayne/.rvm/bin/passenger_ruby;
%p
  For tomahawk chuckers,

%pre.code
  :preserve
    PassengerRuby /home/wayne/.rvm/bin/passenger_ruby

%h2 Notes
%ul
  %li
    Do no not forget to configure the production environment and/or to set the rails_env/RailsEnv variable to development into nginx.conf/httpd.conf for the virtual server config block.
    The RAILS_ENV defaults to 'production'.
  %li
    Be sure to change '/home/wayne' to your own $HOME directory,
  %li
    The '.rvm/bin/passenger_ruby' is actually what is known as a 'wrapper script' which sets up the environment for the passenger so that it can find it's gems, etc... and then exec's the actual ruby bnary.nf"
  %li
    passenger_root/PassengerRoot Should be something similar to the following, which 
    is for Passenger 2.2.11 installed under ree-1.8.7-2010.01.
    %pre.code
      :preserve
         passenger_root /home/millisami/.rvm/gems/ree-1.8.7-2010.01/gems/passenger-2.2.11

%h2
  Troubleshooting
%ul
  %li 
    The most common issue is forgetting the /bin/ part of the path to get the proper wrapper script:
  %li 
    The next most common issue is listening to the output of the passenger installation script with
    respect to where passenger_ruby/PassengerRuby are located. Be sure to use the wrapper script location
    as specified above. To be more clear, see the example below for Nginx config:
%pre.code
  :preserve
    passenger_ruby /home/wayne/.rvm/bin/passenger_ruby;
    * NOTICE THE '.rvm/bin' DIR  ^ ^ ^
    * do NOT use the actual ruby binary in .rvm/rubies/{passenger_ruby}/bin/ruby
    * do not listen to passenger's output for passenger_ruby as passenger is not aware of rvm.

%h2
  FAQ
%ul
  %li
    %p
      Q: Can I run multiple projects under passenger with each project on a different ruby version?
    %p
      A: Not at this time. Passenger currently only supports running it's projects under *one* ruby.
      You can get this behavior using a proxy pass.
  %li
    %p
      Q: How do I use custom gem sets under passenger?
    %p
      A: Without bundler: Select the GEM_HOME for the gemset at the top of your config.ru file:
    %pre.code
      :preserve
        ENV["GEM_HOME"]=%x{"source ~/.bash_profile ; rvm ree%pancake ; rvm gemdir"}.strip
    %p
      A: With bundler: Install bundler outside any gemset, switch back to the gemset you wish to use and run
      %tt bundle install
      and restart the application (by touching tmp/restart.txt). This works becase bundler stores absolute paths inside
      %tt .bundle/environment.rb
      which will be loaded by bundler directly.

%h1
  Community Resources
%ul
  %li

